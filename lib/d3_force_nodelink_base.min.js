!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-force"),require("d3-selection"),require("d3-scale"),require("d3-scale-chromatic"),require("d3-array"),require("d3-drag")):"function"==typeof define&&define.amd?define("d3_force_nodelink_base",["d3-force","d3-selection","d3-scale","d3-scale-chromatic","d3-array","d3-drag"],e):"object"==typeof exports?exports.d3_force_nodelink_base=e(require("d3-force"),require("d3-selection"),require("d3-scale"),require("d3-scale-chromatic"),require("d3-array"),require("d3-drag")):t.d3_force_nodelink_base=e(t.d3,t.d3,t.d3,t.d3,t.d3,t.d3)}("undefined"!=typeof self?self:this,function(t,e,r,n,o,i){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6)}([function(e,r){e.exports=t},function(t,r){t.exports=e},function(t,e){t.exports=r},function(t,e){t.exports=n},function(t,e){t.exports=o},function(t,e){t.exports=i},function(t,e,r){"use strict";r.r(e);var n=r(1),o=r(2),i=r(3),a=r(0),c=r(4),u=r(5);const l={select:n.select,selectAll:n.selectAll,scaleOrdinal:o.scaleOrdinal,scaleLinear:o.scaleLinear,schemeCategory10:i.schemeCategory10,forceManyBody:a.forceManyBody,forceSimulation:a.forceSimulation,forceLink:a.forceLink,forceCenter:a.forceCenter,extent:c.extent,drag:u.drag};var s=class{constructor(t={}){const e={el:null,data:null,width:960,color:l.scaleOrdinal(l.schemeCategory10),forceStrength:-2};Object.assign(this,e,t),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.manyBody=l.forceManyBody().strength(this.forceStrength),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}getLinkId(t,e=!1){var r=[t.source.toString(),t.target.toString()];return!0===e&&r.sort(),r[0]+"-&-"+r[1]}updateData(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}draw(t){var e=this,r=this.width,n=this.height,o=this._data,i=this.manyBody,a=this.color,c=this.getLinkId;return t.each(function(){var t=l.select(this).append("svg").attr("width",r).attr("height",n);function u(t){d3event.active||f.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y}function s(t){t.fx=d3event.x,t.fy=d3event.y}function d(t){d3event.active||f.alphaTarget(0),t.fx=null,t.fy=null}console.log(o),o.nodes.forEach(function(t){t.id=t.id.toString()}),o.links.forEach(function(t){t.source=t.source.toString(),t.target=t.target.toString(),t.id=c(t,o.directed)});var f=l.forceSimulation().force("link",l.forceLink().id(function(t){return t.id})).force("charge",i).force("center",l.forceCenter(r/2,n/2));console.log("ddd"),f.nodes(o.nodes).on("tick",function(){p.attr("cx",function(t){return t.x=Math.max(t.radius,Math.min(r-t.radius,t.x)),t.x}).attr("cy",function(t){return t.y=Math.max(t.radius,Math.min(r-t.radius,t.y)),t.y}).attr("transform",function(t){return"translate("+t.x+","+t.y+")"}),g.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),f.force("link").links(o.links),e.simulation=f;var h=l.scaleLinear().range([4,12]),y=t.append("g"),g=y.append("g").attr("class","links").selectAll(".link");g=g.data(o.links,function(t){return t.id});var p=y.append("g").attr("class","nodes").selectAll(".node");p=function(t,e=null){var i=a(0);h.domain(l.extent(o.nodes,function(t){return t.hasOwnProperty("flow")?t.flow:[5,5]}));var c=t.enter().append("g").attr("class","node").call(l.drag().on("start",u).on("drag",s).on("end",d));return t=t.merge(c).attr("cx",function(t){return t.x=r/2+t.x}).attr("cy",function(t){return t.y=n/2+t.y}).each(function(t){t.hasOwnProperty("flow")?t.radius=h(t.flow):t.radius=5,t.hasOwnProperty("cl_top")?t.color=a(t.cl_top):t.color=i}),c.attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).append("circle").attr("fill",function(t){return t.color}).attr("r",0),null!==e?t.selectAll("circle").transition(e).attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}):t.selectAll("circle").attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}),t}(p=p.data(o.nodes,function(t){return t.id})),g=function(t,e=null){var r=t.enter().append("line").attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).attr("class","link");return(t=t.merge(r)).attr("stroke-width",function(t){return Math.sqrt(t.weight)}),null!==e&&r.style("stroke","green"),t}(g),t.on("click",function(){p.classed("focus",!1),p.selectAll("text").style("display","none"),g.style("opacity",1)})}),this}};r.d(e,"d3ForceNodeLink",function(){return s})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,